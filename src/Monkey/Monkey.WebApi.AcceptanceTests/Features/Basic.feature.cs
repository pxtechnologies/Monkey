// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Monkey.WebApi.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Basic")]
    public partial class BasicFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Basic.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Basic", "\tIn order to avoid silly mistakes\r\n\tAs a backend-developer\r\n\tI want to be told ho" +
                    "w to get started with Monkey.WebApi\r\n\tAnd expose my backend as webapi easily", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("I have writen my model with IRequestHandler pattern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I configured basic WebApi features with swagger", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can expose add operation in WebApi")]
        public virtual void ICanExposeAddOperationInWebApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can expose add operation in WebApi", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 13
 testRunner.Given("I add dynamic api to mvc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.And("I have written \'AddUserCommandHandler\' that accepts \'AddUserCommand\' and returns " +
                    "\'UserEntity\' in \'Users\' namespace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType"});
            table1.AddRow(new string[] {
                        "Name",
                        "string"});
#line 16
 testRunner.And("I have written \'AddUserCommand\' with properties", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType"});
            table2.AddRow(new string[] {
                        "Name",
                        "string"});
#line 19
 testRunner.And("I have written \'UserEntity\'", ((string)(null)), table2, "And ");
#line 23
 testRunner.When("I run the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("Controller \'UsersController\' is exposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.And("Simple \'Post\' action is explosed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType",
                        "PropertyValue"});
            table3.AddRow(new string[] {
                        "Name",
                        "string",
                        "John"});
#line 28
 testRunner.When("I make a \'Post\' request to \'api/Users\' with payload:", ((string)(null)), table3, "When ");
#line 32
 testRunner.Then("RequestHandler \'AddUserCommandHandler\' is invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can expose update operation in WebApi")]
        public virtual void ICanExposeUpdateOperationInWebApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can expose update operation in WebApi", null, ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 36
 testRunner.Given("I add dynamic api to mvc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("I have written \'UpdateUserCommandHandler\' that accepts \'id\',\'UpdateUserCommand\' a" +
                    "nd returns \'UserEntity\' in \'Users\' namespace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType"});
            table4.AddRow(new string[] {
                        "Name",
                        "string"});
#line 39
 testRunner.And("I have written \'UpdateUserCommand\' with properties", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType"});
            table5.AddRow(new string[] {
                        "Name",
                        "string"});
#line 42
 testRunner.And("I have written \'UserEntity\'", ((string)(null)), table5, "And ");
#line 46
 testRunner.When("I run the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("Controller \'UsersController\' is exposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And("Simple \'Put\' action is explosed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType",
                        "PropertyValue"});
            table6.AddRow(new string[] {
                        "Name",
                        "string",
                        "John"});
#line 51
 testRunner.When("I make a \'Put\' request to \'api/Users/{id}\' with payload:", ((string)(null)), table6, "When ");
#line 55
 testRunner.Then("RequestHandler \'UpdateUserCommandHandler\' is invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can expose custom operation in WebApi")]
        public virtual void ICanExposeCustomOperationInWebApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can expose custom operation in WebApi", null, ((string[])(null)));
#line 57
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 58
 testRunner.Given("I add dynamic api to mvc", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.And("I have written \'AcceptUserCommandHandler\' that accepts \'id\',\'AcceptUserCommand\' a" +
                    "nd returns \'UserEntity\' in \'Users\' namespace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType"});
            table7.AddRow(new string[] {
                        "Name",
                        "string"});
#line 61
 testRunner.And("I have written \'AcceptUserCommand\' with properties", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType"});
            table8.AddRow(new string[] {
                        "Name",
                        "string"});
#line 64
 testRunner.And("I have written \'UserEntity\'", ((string)(null)), table8, "And ");
#line 68
 testRunner.When("I run the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("Controller \'UsersController\' is exposed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("Extended \'Post\' action is explosed under \'api/Users/{id}/Accept\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyName",
                        "PropertyType",
                        "PropertyValue"});
            table9.AddRow(new string[] {
                        "Name",
                        "string",
                        "John"});
#line 73
 testRunner.When("I make a \'Post\' request to \'api/Users/{id}/Accept\' with payload:", ((string)(null)), table9, "When ");
#line 77
 testRunner.Then("RequestHandler \'AcceptUserCommandHandler\' is invoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
