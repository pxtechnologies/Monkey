// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Monkey.Sql.WebApiHost.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bootstrapping")]
    public partial class BootstrappingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Bootstrapping.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Bootstrapping", "\tIn order to avoid silly mistakes\r\n\tAs a admin idiot\r\n\tI want to be told how the " +
                    "deployment works", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("the \'Test\' database is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("the \'Monkey\' database is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("WebApiHost has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("Monkey was installed in \'Test\' database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to restart app and load assembly from database")]
        public virtual void IWantToRestartAppAndLoadAssemblyFromDatabase()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to restart app and load assembly from database", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table1.AddRow(new string[] {
                        "CREATE OR ALTER PROC AddProduct @name nvarchar(255)"});
            table1.AddRow(new string[] {
                        "AS"});
            table1.AddRow(new string[] {
                        "BEGIN"});
            table1.AddRow(new string[] {
                        "SELECT @name as [Name];"});
            table1.AddRow(new string[] {
                        "END"});
#line 13
 testRunner.Given("I executed a script against \'Test\' database:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table2.AddRow(new string[] {
                        "EXEC webapi_BindStoredProc \'AddProduct\',\'Test\';"});
#line 21
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table3.AddRow(new string[] {
                        "EXEC webapi_Publish;"});
#line 25
 testRunner.And("I publish WebApi on \'Test\' database with sql statement:", ((string)(null)), table3, "And ");
#line 29
 testRunner.When("I restart WebApiHost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.And("I invoke WebApi with \'POST\' request on \'api/Product\' with data \'{\"name\":\"iPhone\"}" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.Then("I expect a response from url \'api/Product\' with data \'{\"name\":\"iPhone\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to publish changes while app is running")]
        public virtual void IWantToPublishChangesWhileAppIsRunning()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to publish changes while app is running", null, ((string[])(null)));
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table4.AddRow(new string[] {
                        "CREATE OR ALTER PROC AddProduct @name nvarchar(255)"});
            table4.AddRow(new string[] {
                        "AS"});
            table4.AddRow(new string[] {
                        "BEGIN"});
            table4.AddRow(new string[] {
                        "SELECT @name as [Name];"});
            table4.AddRow(new string[] {
                        "END"});
#line 35
 testRunner.Given("I executed a script against \'Test\' database:", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table5.AddRow(new string[] {
                        "EXEC webapi_BindStoredProc \'AddProduct\',\'Test\';"});
#line 43
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table6.AddRow(new string[] {
                        "EXEC webapi_Publish;"});
#line 47
 testRunner.And("I publish WebApi on \'Test\' database with sql statement:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table7.AddRow(new string[] {
                        "CREATE OR ALTER PROC EditProduct @id int, @name nvarchar(255)"});
            table7.AddRow(new string[] {
                        "AS"});
            table7.AddRow(new string[] {
                        "BEGIN"});
            table7.AddRow(new string[] {
                        "SELECT @name as [Name];"});
            table7.AddRow(new string[] {
                        "END"});
#line 51
 testRunner.And("I executed a script against \'Test\' database:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table8.AddRow(new string[] {
                        "EXEC webapi_BindStoredProc \'EditProduct\',\'Test\';"});
#line 59
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table9.AddRow(new string[] {
                        "EXEC webapi_Publish;"});
#line 63
 testRunner.When("I publish WebApi on \'Test\' database with sql statement:", ((string)(null)), table9, "When ");
#line 67
 testRunner.And("I invoke WebApi with \'PUT\' request on \'api/Product/123\' with data \'{\"name\":\"iPhon" +
                    "e\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("I expect a response from url \'api/Product/123\' with data \'{\"name\":\"iPhone\"}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
