// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Monkey.Sql.WebApiHost.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ErrorHandling")]
    public partial class ErrorHandlingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ErrorHandling.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ErrorHandling", "\tIn order to avoid silly mistakes\r\n\tAs a SQL dev\r\n\tI want to be told how to API h" +
                    "andles SQL Exceptions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("the \'Test\' database is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("the \'Monkey\' database is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("WebApiHost has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("Monkey was installed in \'Test\' database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to return error response according to HTTP conventions")]
        [NUnit.Framework.TestCaseAttribute("50401", "Funny message", "2", "{\"code\":2,\"message\":\"Funny message\"}", "401", null)]
        [NUnit.Framework.TestCaseAttribute("50402", "Another message", "1", "{\"code\":1,\"message\":\"Another message\"}", "402", null)]
        [NUnit.Framework.TestCaseAttribute("50401", "<custom>Hello</custom>", "255", "{\"custom\":\"Hello\"}", "401", null)]
        public virtual void IWantToReturnErrorResponseAccordingToHTTPConventions(string errorCode, string errorMessage, string errorState, string payloadResponse, string httpErrorCode, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to return error response according to HTTP conventions", null, exampleTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table10.AddRow(new string[] {
                        "CREATE OR ALTER PROC AddProduct @name nvarchar(255)"});
            table10.AddRow(new string[] {
                        "AS"});
            table10.AddRow(new string[] {
                        "BEGIN"});
            table10.AddRow(new string[] {
                        string.Format("THROW {0}, \'{1}\', {2};", errorCode, errorMessage, errorState)});
            table10.AddRow(new string[] {
                        "END"});
#line 13
 testRunner.Given("I executed a script against \'Test\' database:", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table11.AddRow(new string[] {
                        "EXEC webapi_BindStoredProc \'AddProduct\',\'Test\';"});
#line 21
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table12.AddRow(new string[] {
                        "EXEC webapi_Publish;"});
#line 25
 testRunner.When("I publish WebApi on \'Test\' database with sql statement:", ((string)(null)), table12, "When ");
#line 29
 testRunner.And("I invoke WebApi with \'POST\' request on \'api/Product\' with data \'{\"name\":\"iPhone\"}" +
                    "\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then(string.Format("I expect a response from url \'api/Product\' with http-code \'{0}\' and data \'{1}\'", httpErrorCode, payloadResponse), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
