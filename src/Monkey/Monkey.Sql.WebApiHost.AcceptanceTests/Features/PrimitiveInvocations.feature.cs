// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Monkey.Sql.WebApiHost.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PrimitiveInvocations")]
    public partial class PrimitiveInvocationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PrimitiveInvocations.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PrimitiveInvocations", "\tIn order to avoid silly mistakes\r\n\tAs a SQL developer\r\n\tI want to be told how to" +
                    " expose simple stored procedures as web-api", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("the \'Test\' database is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("the \'Monkey\' database is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("WebApiHost has started", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("Monkey was installed in \'Test\' database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to invoke stored procedure with different primitive parameters")]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "tinyint", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123}", "{\"resultNumber\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "smallint", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123}", "{\"resultNumber\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "int", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123}", "{\"resultNumber\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "bigint", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123}", "{\"resultNumber\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "numeric(10,2)", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123.5}", "{\"resultNumber\":123.50}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "money", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123.5}", "{\"resultNumber\":123.5000}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "smallmoney", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123.5}", "{\"resultNumber\":123.5000}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "real", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123.1}", "{\"resultNumber\":123.1}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "float", "@number", "ResultNumber", "POST", "api/Product/", "{\"number\":123.1}", "{\"resultNumber\":123.1}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "nvarchar(255)", "@name", "ResultName", "POST", "api/Product/", "{\"name\":\"John\"}", "{\"resultName\":\"John\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "varchar(255)", "@name", "ResultName", "POST", "api/Product/", "{\"name\":\"John\"}", "{\"resultName\":\"John\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "char(255)", "@name", "ResultName", "POST", "api/Product/", "{\"name\":\"John\"}", "{\"resultName\":\"John\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "nchar(255)", "@name", "ResultName", "POST", "api/Product/", "{\"name\":\"John\"}", "{\"resultName\":\"John\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "text", "@name", "ResultName", "POST", "api/Product/", "{\"name\":\"John\"}", "{\"resultName\":\"John\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "ntext", "@name", "ResultName", "POST", "api/Product/", "{\"name\":\"John\"}", "{\"resultName\":\"John\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "decimal", "@value", "ResultValue", "POST", "api/Product/", "{\"value\":\"1.0\"}", "{\"resultValue\":1.0}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "uniqueidentifier", "@sku", "ResutSku", "POST", "api/Product/", "{\"sku\":\"B915B92A-8E13-4763-8F4B-2DDF5CE09076\"}", "{\"resutSku\":\"b915b92a-8e13-4763-8f4b-2ddf5ce09076\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "time", "@time", "ResultTime", "POST", "api/Product/", "{\"time\":\"11:22\"}", "{\"resultTime\":\"11:22:00\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "datetime", "@date", "ResultDate", "POST", "api/Product/", "{\"date\":\"2019-04-01 11:22\"}", "{\"resultDate\":\"2019-04-01T11:22:00\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "datetime2", "@date", "ResultDate", "POST", "api/Product/", "{\"date\":\"2019-04-01 11:22\"}", "{\"resultDate\":\"2019-04-01T11:22:00\"}", null)]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "datetimeoffset", "@date", "ResultDate", "POST", "api/Product/", "{\"date\":\"2019-04-01 11:22\"}", "{\"resultDate\":\"2019-04-01T11:22:00+00:00\"}", null)]
        public virtual void IWantToInvokeStoredProcedureWithDifferentPrimitiveParameters(string procedureName, string paramType, string paramName, string resultColumnName, string httpMethod, string url, string requestPayload, string responsePayload, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to invoke stored procedure with different primitive parameters", null, exampleTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table10.AddRow(new string[] {
                        string.Format("CREATE OR ALTER PROC {0} {1} {2}", procedureName, paramName, paramType)});
            table10.AddRow(new string[] {
                        "AS"});
            table10.AddRow(new string[] {
                        "BEGIN"});
            table10.AddRow(new string[] {
                        string.Format("SELECT {0} as {1};", paramName, resultColumnName)});
            table10.AddRow(new string[] {
                        "END"});
#line 13
 testRunner.Given("I executed a script against \'Test\' database:", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table11.AddRow(new string[] {
                        string.Format("EXEC webapi_BindStoredProc \'{0}\',\'Test\';", procedureName)});
#line 21
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table12.AddRow(new string[] {
                        "EXEC webapi_Publish;"});
#line 25
 testRunner.When("I publish WebApi on \'Test\' database with sql statement:", ((string)(null)), table12, "When ");
#line 29
 testRunner.And(string.Format("I invoke WebApi with \'{0}\' request on \'{1}\' with data \'{2}\'", httpMethod, url, requestPayload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.Then(string.Format("I expect a response from url \'{0}\' with data \'{1}\'", url, responsePayload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to map stored procedure according to REST conventions")]
        [NUnit.Framework.TestCaseAttribute("AddProduct", "nvarchar(255)", "@name", "@number", "int", "Name", "Number", "POST", "api/Product", "{\"name\":\"pc\",\"number\":123}", "{\"name\":\"pc\",\"number\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("CreateProduct", "nvarchar(255)", "@name", "@number", "int", "Name", "Number", "POST", "api/Product", "{\"name\":\"pc\",\"number\":123}", "{\"name\":\"pc\",\"number\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("InsertProduct", "nvarchar(255)", "@name", "@number", "int", "Name", "Number", "POST", "api/Product", "{\"name\":\"pc\",\"number\":123}", "{\"name\":\"pc\",\"number\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("ModifyProduct", "nvarchar(255)", "@id", "@number", "int", "Name", "Number", "PUT", "api/Product/pc", "{\"number\":123}", "{\"name\":\"pc\",\"number\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("EditProduct", "nvarchar(255)", "@id", "@number", "int", "Name", "Number", "PUT", "api/Product/pc", "{\"number\":123}", "{\"name\":\"pc\",\"number\":123}", null)]
        [NUnit.Framework.TestCaseAttribute("UpdateProduct", "nvarchar(255)", "@id", "@number", "int", "Name", "Number", "PUT", "api/Product/pc", "{\"number\":123}", "{\"name\":\"pc\",\"number\":123}", null)]
        public virtual void IWantToMapStoredProcedureAccordingToRESTConventions(string procedureName, string paramType, string paramName, string paramName2, string paramType2, string resultColumnName, string resultColumnName2, string httpMethod, string url, string requestPayload, string responsePayload, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to map stored procedure according to REST conventions", null, exampleTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table13.AddRow(new string[] {
                        string.Format("CREATE OR ALTER PROC {0} {1} {2}, {3} {4}", procedureName, paramName, paramType, paramName2, paramType2)});
            table13.AddRow(new string[] {
                        "AS"});
            table13.AddRow(new string[] {
                        "BEGIN"});
            table13.AddRow(new string[] {
                        string.Format("SELECT {0} as {1}, {2} as {3};", paramName, resultColumnName, paramName2, resultColumnName2)});
            table13.AddRow(new string[] {
                        "END"});
#line 57
 testRunner.Given("I executed a script against \'Test\' database:", ((string)(null)), table13, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table14.AddRow(new string[] {
                        string.Format("EXEC webapi_BindStoredProc \'{0}\',\'Test\';", procedureName)});
#line 65
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table15.AddRow(new string[] {
                        "EXEC webapi_Publish;"});
#line 69
 testRunner.When("I publish WebApi on \'Test\' database with sql statement:", ((string)(null)), table15, "When ");
#line 73
 testRunner.And(string.Format("I invoke WebApi with \'{0}\' request on \'{1}\' with data \'{2}\'", httpMethod, url, requestPayload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.Then(string.Format("I expect a response from url \'{0}\' with data \'{1}\'", url, responsePayload), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to pass nulls and retrive nulls")]
        public virtual void IWantToPassNullsAndRetriveNulls()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to pass nulls and retrive nulls", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table16.AddRow(new string[] {
                        "CREATE OR ALTER PROC AddProduct @name nvarchar(255)"});
            table16.AddRow(new string[] {
                        "AS"});
            table16.AddRow(new string[] {
                        "BEGIN"});
            table16.AddRow(new string[] {
                        "if @name is not null throw 51000, \'name is not null\',1;"});
            table16.AddRow(new string[] {
                        "SELECT \'Tv\' as Name, null as Company;"});
            table16.AddRow(new string[] {
                        "END"});
#line 87
 testRunner.Given("I executed a script against \'Test\' database:", ((string)(null)), table16, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table17.AddRow(new string[] {
                        "EXEC webapi_BindStoredProc \'AddProduct\',\'Test\';"});
#line 96
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table18.AddRow(new string[] {
                        "EXEC webapi_Publish;"});
#line 100
 testRunner.When("I publish WebApi on \'Test\' database with sql statement:", ((string)(null)), table18, "When ");
#line 104
 testRunner.And("I invoke WebApi with \'POST\' request on \'api/Product\' with data \'{}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
 testRunner.Then("I expect a response from url \'api/Product\' with data \'{\"name\":\"Tv\",\"company\":null" +
                    "}\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to retrive many records from procedure execution")]
        public virtual void IWantToRetriveManyRecordsFromProcedureExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to retrive many records from procedure execution", null, ((string[])(null)));
#line 107
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table19.AddRow(new string[] {
                        "CREATE OR ALTER PROC GetProducts @name nvarchar(255)"});
            table19.AddRow(new string[] {
                        "AS"});
            table19.AddRow(new string[] {
                        "BEGIN"});
            table19.AddRow(new string[] {
                        "SELECT @name as Name"});
            table19.AddRow(new string[] {
                        "UNION ALL SELECT \'Two\'"});
            table19.AddRow(new string[] {
                        "END"});
#line 108
testRunner.Given("I executed a script against \'Test\' database:", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table20.AddRow(new string[] {
                        "EXEC webapi_BindStoredProc \'GetProducts\',\'Test\';"});
#line 117
 testRunner.And("I expose the procedure with sql statement on \'Test\' database:", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sql"});
            table21.AddRow(new string[] {
                        "EXEC Publish;"});
#line 121
 testRunner.When("I publish WebApi on \'Monkey\' database with sql statement:", ((string)(null)), table21, "When ");
#line 125
 testRunner.And("I invoke WebApi with \'GET\' request on \'api/Product?name=tv\' without data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.Then("I expect a response from url \'api/Product\' with data \'[{\"name\":\"tv\"},{\"name\":\"Two" +
                    "\"}]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
